创建目录:mkdir learngit

初始化:进入learngit目录,执行git init。如出现.git目录则初始化成功。ls -a

新建文件:readme.txt

文件添加至缓存区stage:git add readme.txt

文件提交到仓库:git commit -m "wrote a readme file"

查看仓库当前状态:git status

比较文件改动:git diff readme.txt

查看详细历史记录:git log

查看简洁历史记录:git log --pretty=oneline

当前版本回退至上一个版本:git reset --hard HEAD^, 上上一个版本HEAD^^,上10个版本HEAD~10

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

查看工作区和版本库里面最新版本的区别:git diff HEAD -- readme.txt

丢弃工作区修改:git checkout -- readme.txt (git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令)

撤销暂存区的修改,重新放回工作区:git reset HEAD readme.txt

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

删除文件:rm test.txt 如果确定从版本库中删除。就git rm test.txt删掉,并且git commit提交,如果删错了,因为版本库中还有,可以把误删的文件恢复到最新版本git checkout -- test.txt
(git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。)

把本地仓库与远程仓库关联起来,进入到本地目录learngit,执行:git remote add origin git@github.com:hujiabei/learngit.git,关联成功后将本地库内容推送到远程仓库上git push -u origin master(用git push命令，实际上是把当前分支master推送到远程.由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。)

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone git@github.com:hujiabei/learngit.git命令克隆。

创建分支:git branch dev
创建dev分支，然后切换到dev分支:git checkout -b dev

查看分支:git branch

切换分支:git checkout master

合并分支:git merge dev

删除分支:git branch -d dev

查看分支合并图:git log --graph(git log --graph --pretty=oneline --abbrev-commit)

存储工作区:git stash 

查看存储列表:git stash list

恢复存储:一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；另一种方式是用git stash pop，恢复的同时把stash内容也删了：

开发一个新feature，最好新建一个分支git branch -d feature-vulcan
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

git tag -a <tagname> -m "blablabla..."可以指定标签信息；

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

命令git tag可以查看所有标签。

命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
